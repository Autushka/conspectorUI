###
# #%L
# ProjectX2013_03_23_web
# %%
# Copyright (C) 2013 - 2014 Powered by Sergey
# %%
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#      http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# #L%
###

# You need to enter your license on the line below It is a uuencoded string and can be in a single line or in
# multiple lines with each lime (except the last one) ended with a \.
license=bHtzLjSa8TwnWysGZbHlvj2B5T53uzsdJzqxHD1Zu61kYWW9LXD9j2wyRxZ8vGk2dpjpPHYSRQQ9\
x2W0J7v5PCfI7z6nyjs3ZonxjCa76QQ8yLOtZ4M1jTnl9z08UHEUdOD3njxyNSZ2ElU1PcXlNH27\
ORY3yzk/9bs7Jybb4z53CKmXK8i7lie76Qy1SykFdTCpF2b54T0mMkU+PcXlNH27ORZ32ak+dOlz\
Dvf5sTV2qeu9JtozHXW7KwR1MLk/dvjjPXYSRRc9xeU0fLrxFidbKwZ08a++PHInPGaZoYxnKje1\
OeX3PTxS8RQ3SbmmdOH/n31Av78swnWGbknhvTfKP7c55fc9PFAxFCfxcR9zyqmFPMizrWeB9Q03\
YPmfZ/rjhHZArRdm2jEXJ4i9DG5bdRR36/mEZrtjHD3aMy136vuMPchplG8q+T0mQL8fd8spByaL\
8Rw/CuknbypzPTXT8yVl+vEkJsppHGV6OQxmQL0cd8spByaL8Rw8yaGUdtipPWWhkQ4mibUdf9p5\
Fnfr+YRlsfEfd6H1PGdaST4nWXMVZpttvC2B5RZnWIk+Yp99hj2B5RZnWsm+ZpmhhTzBty1sMlcU\
PcXlNH07+RY1WbmlZp51nH6b4ZY10/MdZOmxpHbYqT1ls/EOZ0srPDXT8x1k63Ekd5oxF2ZgrQQm\
mOE0PchplG8q+T0mQL8fPchplH/KuT1nSvGXbyr5PWWhtR8+mzEWZ4v5nryb8y1mq/OEd7x7HWeB\
5TxnSPmMJtrxPD3Ley01wzM85rvxDWar84RloaWHPYH1D2daST4nWXMVZpttvC2B5RZnWIk+Yp99\
hn2B5RZnSsm+N9j7NiZAvx49wzMM5vi5jTabf589geUW/WAPPzxSNRQnu/k8J8ovvjh2Nz0nKuEN\
JovhDbnBxSw=

### The following are optional settings

# If set then the server assumes the files needed for output of Asian text is not available and will fall-back to latin text only
# asian.support=false 

# This will set all calls to the JAI image decoders to be single threaded. This is needed to work around a bug in JAI.
# decoder.semaphore=on

# When charts are rendered, they are rendered at this resolution
# default.chart.dpi=300

# If a bitmap does not have it's DPI set, this is the value used.
# default.image.dpi=96

# What to do if find a <CR> or <TAB> in the text. Choices are ignore, newline, or paragraph. <TAB> is handled for both newline 
# and paragraph. newline is a line break.
# expand.out.text=paragraph

# A series of paths, seperated by semicolons, to where the true type fonts are on the system. The only wildcard recognized is 
# the * (ie, no regular expressions).
# font.files=c:/windows/fonts/*.ttf;c:/windows/fonts/*.ttc;

# Map one font name to another.
# font.map=Arial=Courier New;Times New Roman=Verdana

# The output pattern used for type='CURRENCY' is no pattern is specified. The default for this can differ slightly between 
# different Java implementations.
# format.currency=�#,##0.00;(�#,##0.00)

# The output pattern used for type='NUMBER' is no pattern is specified. The default for this can differ slightly between 
# different Java implementations.
# format.number=#,##0.###

# The output pattern used for type='PERCENT' is no pattern is specified. The default for this can differ slightly between 
# different Java implementations.
# format.percent=#,##0%

# This will turn on the IIO cache. Do not do this if running on an IBM JVM.
# iio.cache=on

# This will use Windward Reports instead of java.awt to determine line breaks. This should not be used with Thai
# line.break=internal

# The location of your log4j properties file. If you use log4j for your application, put the properties file location here.
# the value of off means you are not using log4j. You can also not set this if log4j is initialized before Windward Reports
# is called.
# logging.filename=/log4j.properties
logging.filename=off

# Turn off the comments embedded in the generated report listing version, O/S, etc.
# report.embed.info=off

# set the locale for system messages. If not set will use the system locale.
# The following sets it to German, Swiss
# system.locale=de_CH
# The following sets it to German
# system.locale=de

# Can be set to 2000, 2002, 2003, or 2007(default). The template will be parsed using the default values for that version of Word.
# word.version=2007

# If set to true then when writing tags to a report (like for RunReportCleanup) it will write the tags in the field format
# write.as.fields=false


### The below set the defaults for report types.

# The default value for ProcessReport.setCharset(). You must use either a Windows codepage number (U.S. English = 1252) or the 
# number of the static final int specified in ProcessReport. This can still be overridden with a programatic call to 
# ProcessReport.setCharset().
# report.charset=1

# The default value for ProcessReport.setDebugMode().You must use true or false. This can still be overridden with a programatic 
# call to ProcessReport.DebugMode().
# report.debug_mode=false

# The default value for ProcessReport.setLocale(). You must use either a language (en) or language/country (en_US). This can 
# still be overridden with a programatic call to ProcessReport.setLocale().
# If not set this will use the system locale.
# report.locale=en_US

# The default value for ProcessHtml.setFullFile().You must use true or false. This can still be overridden with a programatic 
# call to ProcessHtml.setFullFile().
# html.full_file=true

# The default value for ProcessHtml.setSpec(). You must use the number of the static final int specified in ProcessHtml. This 
# can still be overridden with a programatic call to ProcessHtml.setSpec().
# html.html_type=1

# The default value for ProcessPdf.setCompressionLevel(). You must use the number of the static final int specified in 
# ProcessPdf. This can still be overridden with a programatic call to ProcessPdf.setCompressionLevel().
# pdf.compression_level=1

# The default value for ProcessPdf.setFontLevel(). You must use the number of the static final int specified in ProcessPdf. 
# This can still be overridden with a programatic call to ProcessPdf.setFontLevel().
# pdf.font_level=2

# Can be set to auto or ArialMT=Arial;Arial-BoldMT=Arial,Bold;
# auto will set the font names to the name specified in the template, overwriting the true postscript name.
# The series of PostscriptName=FinalName; is explicit mapping and you can have as many as you wish.
# You must restart your application after changing this setting.
# pdf.font_mapping=none

# The default value for ProcessRtf.setCopyAllTags().You must use true or false. This can still be overridden with a programatic 
# call to ProcessRtf.setCopyAllTags().
# rtf.copy_unknown=false

# The default value for ProcessTxt.setBreakPage().You must use true or false. This can still be overridden with a programatic 
# call to ProcessTxt.setBreakPage().
# txt.break_page=false

# The default value for ProcessTxt.setShowHeaders().You must use true or false. This can still be overridden with a programatic 
# call to ProcessTxt.setShowHeaders().
# txt.show_headers=false

# The default value for ProcessTxt.setUseMargins().You must use true or false. This can still be overridden with a programatic 
# call to ProcessTxt.setUseMargins().
# txt.use_margins=false

# The default value for ProcessTxt.setUseSoftEoln(). You must use true or false. This can still be overridden with a programatic 
# call to ProcessTxt.setUseSoftEoln().
# txt.use_soft_eoln=true

# Used for loading custom functions for equations beyond WindwardCustomFunctions.dll. Semicolon separated list of class names
# function.files=WindwardCustomFunctionExample.myCustomFunctions;WindwardCustomFunctionExample.myCustomFunctions2